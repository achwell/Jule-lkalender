// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  beers         Beer[]
  Review        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Beer {
  id            String         @id @default(uuid())
  name          String
  style         String
  description   String?
  abv           Float?
  ibu           Int?
  ebc           Int?
  recipe        String?
  untapped      String?
  brewedDate    DateTime?
  bottleDate    DateTime?
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  beerCalendars BeerCalendar[]
  rewiews       Review[]
}

model Calendar {
  id            String         @id @default(uuid())
  name          String
  year          Int
  isPublic      Boolean
  archived      Boolean
  beerCalendars BeerCalendar[]
  Review        Review[]

  @@unique([year, name])
}

model BeerCalendar {
  id         String   @id @default(uuid())
  day        Int
  beerId     String
  calendarId String
  beer       Beer     @relation(fields: [beerId], references: [id], onDelete: Cascade)
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@unique([beerId, calendarId])
  @@unique([day, calendarId])
}

model Review {
  id            String   @id @default(uuid())
  beerId        String
  calendarId    String
  reviewerId    String
  ratingLabel   Float
  ratingLooks   Float
  ratingSmell   Float
  ratingTaste   Float
  ratingFeel    Float
  ratingOverall Float
  comment       String?
  createdAt     DateTime
  beer          Beer     @relation(fields: [beerId], references: [id], onDelete: Cascade)
  calendar      Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  reviewer      User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([beerId, calendarId, reviewerId])
}
